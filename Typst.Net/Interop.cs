// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Typst.Net;
#pragma warning restore 0105

namespace Typst.Net
{
    public static partial class Interop
    {
        public const string NativeLib = "typst_dotnet";

        static Interop()
        {
        }


        /// Function using the type.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "my_function")]
        public static extern Vec2 my_function(Vec2 input);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "render_svg")]
        public static extern Sliceu8 render_svg(TypstInput input);
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct TypstInput
    {
        public Slicei8 content;
    }

    /// A simple type in our FFI layer.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec2
    {
        public float x;
        public float y;
    }

    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Slicei8
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct Slicei8 : IEnumerable<sbyte>
    {
        public Slicei8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public Slicei8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public sbyte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(sbyte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<sbyte>(ptr);
            }
        }
        public sbyte[] Copied
        {
            get
            {
                var rval = new sbyte[len];
                for (var i = 0; i < (int)len; i++)
                {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int)len;
        public IEnumerator<sbyte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        // Method to convert a string to Slicei8
        public static Slicei8 FromString(string input)
        {
            // Convert the string to a byte array
            byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(input);

            // Pin the byte array in memory
            GCHandle handle = GCHandle.Alloc(byteArray, GCHandleType.Pinned);

            // Create and return a new Slicei8 instance
            return new Slicei8(handle, (ulong)byteArray.Length);
        }
    }

    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Sliceu8
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct Sliceu8 : IEnumerable<byte>
    {
        public Sliceu8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public Sliceu8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<byte>(ptr);
            }
        }
        public byte[] Copied
        {
            get
            {
                var rval = new byte[len];
                for (var i = 0; i < (int)len; i++)
                {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int)len;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }

        // ToString method to convert Slicei8 back to string
        public override string ToString()
        {
            // Create a byte array to hold the data
            byte[] byteArray = new byte[len];

            // Copy the data from the pointer into the byte array
            Marshal.Copy(data, byteArray, 0, (int)len);

            // Convert the byte array back to a string using UTF-8 encoding
            return System.Text.Encoding.UTF8.GetString(byteArray);
        }
    }

    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error) : base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
